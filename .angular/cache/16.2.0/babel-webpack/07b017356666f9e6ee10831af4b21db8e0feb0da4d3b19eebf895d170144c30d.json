{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DummyApiService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'https://dummyjson.com'; // Base URL of DummyJSON API\n    this.token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJtaWNoYWVsdyIsImVtYWlsIjoibWljaGFlbC53aWxsaWFtc0B4LmR1bW15anNvbi5jb20iLCJmaXJzdE5hbWUiOiJNaWNoYWVsIiwibGFzdE5hbWUiOiJXaWxsaWFtcyIsImdlbmRlciI6Im1hbGUiLCJpbWFnZSI6Imh0dHBzOi8vZHVtbXlqc29uLmNvbS9pY29uL21pY2hhZWx3LzEyOCIsImlhdCI6MTcxNzYxMTc0MCwiZXhwIjoxNzE3NjE1MzQwfQ.eQnhQSnS4o0sXZWARh2HsWrEr6XfDT4ngh0ejiykfH8'; // Replace with your actual token\n  }\n\n  getHeaders() {\n    return new HttpHeaders({\n      'Authorization': `Bearer ${this.token}`,\n      'Content-Type': 'application/json'\n    });\n  }\n  getData(resource, params) {\n    let url = `${this.baseUrl}/${resource}`;\n    if (params) {\n      url += `?${this.serializeParams(params)}`;\n    }\n    return this.http.get(url, {\n      headers: this.getHeaders()\n    });\n  }\n  submitForm(endpoint, data) {\n    return this.http.post(`${this.baseUrl}/${endpoint}`, data, {\n      headers: this.getHeaders()\n    });\n  }\n  updateData(resource, id, newData) {\n    return this.http.put(`${this.baseUrl}/${resource}/${id}`, newData, {\n      headers: this.getHeaders()\n    });\n  }\n  deleteData(resource, id) {\n    return this.http.delete(`${this.baseUrl}/${resource}/${id}`, {\n      headers: this.getHeaders()\n    });\n  }\n  serializeParams(params) {\n    return Object.keys(params).map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`).join('&');\n  }\n}\n_class = DummyApiService;\n_class.ɵfac = function DummyApiService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","DummyApiService","constructor","http","baseUrl","token","getHeaders","getData","resource","params","url","serializeParams","get","headers","submitForm","endpoint","data","post","updateData","id","newData","put","deleteData","delete","Object","keys","map","key","encodeURIComponent","join","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\N\\Desktop\\angular-project\\src\\app\\services\\dummy-api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DummyApiService {\r\n  private baseUrl = 'https://dummyjson.com'; // Base URL of DummyJSON API\r\n  private token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJtaWNoYWVsdyIsImVtYWlsIjoibWljaGFlbC53aWxsaWFtc0B4LmR1bW15anNvbi5jb20iLCJmaXJzdE5hbWUiOiJNaWNoYWVsIiwibGFzdE5hbWUiOiJXaWxsaWFtcyIsImdlbmRlciI6Im1hbGUiLCJpbWFnZSI6Imh0dHBzOi8vZHVtbXlqc29uLmNvbS9pY29uL21pY2hhZWx3LzEyOCIsImlhdCI6MTcxNzYxMTc0MCwiZXhwIjoxNzE3NjE1MzQwfQ.eQnhQSnS4o0sXZWARh2HsWrEr6XfDT4ngh0ejiykfH8'; // Replace with your actual token\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  private getHeaders(): HttpHeaders {\r\n    return new HttpHeaders({\r\n      'Authorization': `Bearer ${this.token}`,\r\n      'Content-Type': 'application/json'\r\n    });\r\n  }\r\n\r\n  getData(resource: string, params?: any): Observable<any> {\r\n    let url = `${this.baseUrl}/${resource}`;\r\n    if (params) {\r\n      url += `?${this.serializeParams(params)}`;\r\n    }\r\n    return this.http.get<any>(url, { headers: this.getHeaders() });\r\n  }\r\n\r\n  submitForm(endpoint: string, data: any): Observable<any> {\r\n    return this.http.post<any>(`${this.baseUrl}/${endpoint}`, data, { headers: this.getHeaders() });\r\n  }\r\n\r\n  updateData(resource: string, id: number, newData: any): Observable<any> {\r\n    return this.http.put<any>(`${this.baseUrl}/${resource}/${id}`, newData, { headers: this.getHeaders() });\r\n  }\r\n\r\n  deleteData(resource: string, id: number): Observable<any> {\r\n    return this.http.delete<any>(`${this.baseUrl}/${resource}/${id}`, { headers: this.getHeaders() });\r\n  }\r\n\r\n  private serializeParams(params: any): string {\r\n    return Object.keys(params).map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`).join('&');\r\n  }\r\n}\r\n"],"mappings":";AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAM9D,OAAM,MAAOC,eAAe;EAI1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,OAAO,GAAG,uBAAuB,CAAC,CAAC;IACnC,KAAAC,KAAK,GAAG,qXAAqX,CAAC,CAAC;EAE/V;;EAEhCC,UAAUA,CAAA;IAChB,OAAO,IAAIN,WAAW,CAAC;MACrB,eAAe,EAAE,UAAU,IAAI,CAACK,KAAK,EAAE;MACvC,cAAc,EAAE;KACjB,CAAC;EACJ;EAEAE,OAAOA,CAACC,QAAgB,EAAEC,MAAY;IACpC,IAAIC,GAAG,GAAG,GAAG,IAAI,CAACN,OAAO,IAAII,QAAQ,EAAE;IACvC,IAAIC,MAAM,EAAE;MACVC,GAAG,IAAI,IAAI,IAAI,CAACC,eAAe,CAACF,MAAM,CAAC,EAAE;;IAE3C,OAAO,IAAI,CAACN,IAAI,CAACS,GAAG,CAAMF,GAAG,EAAE;MAAEG,OAAO,EAAE,IAAI,CAACP,UAAU;IAAE,CAAE,CAAC;EAChE;EAEAQ,UAAUA,CAACC,QAAgB,EAAEC,IAAS;IACpC,OAAO,IAAI,CAACb,IAAI,CAACc,IAAI,CAAM,GAAG,IAAI,CAACb,OAAO,IAAIW,QAAQ,EAAE,EAAEC,IAAI,EAAE;MAAEH,OAAO,EAAE,IAAI,CAACP,UAAU;IAAE,CAAE,CAAC;EACjG;EAEAY,UAAUA,CAACV,QAAgB,EAAEW,EAAU,EAAEC,OAAY;IACnD,OAAO,IAAI,CAACjB,IAAI,CAACkB,GAAG,CAAM,GAAG,IAAI,CAACjB,OAAO,IAAII,QAAQ,IAAIW,EAAE,EAAE,EAAEC,OAAO,EAAE;MAAEP,OAAO,EAAE,IAAI,CAACP,UAAU;IAAE,CAAE,CAAC;EACzG;EAEAgB,UAAUA,CAACd,QAAgB,EAAEW,EAAU;IACrC,OAAO,IAAI,CAAChB,IAAI,CAACoB,MAAM,CAAM,GAAG,IAAI,CAACnB,OAAO,IAAII,QAAQ,IAAIW,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE,IAAI,CAACP,UAAU;IAAE,CAAE,CAAC;EACnG;EAEQK,eAAeA,CAACF,MAAW;IACjC,OAAOe,MAAM,CAACC,IAAI,CAAChB,MAAM,CAAC,CAACiB,GAAG,CAACC,GAAG,IAAI,GAAGC,kBAAkB,CAACD,GAAG,CAAC,IAAIC,kBAAkB,CAACnB,MAAM,CAACkB,GAAG,CAAC,CAAC,EAAE,CAAC,CAACE,IAAI,CAAC,GAAG,CAAC;EAClH;;SAnCW5B,eAAe;;mBAAfA,MAAe,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAfhC,MAAe;EAAAiC,OAAA,EAAfjC,MAAe,CAAAkC,IAAA;EAAAC,UAAA,EAFd;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}